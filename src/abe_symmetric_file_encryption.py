"""
Module for the interfacing of ABE components of framework with symmetric file encryption

:Authors: Munachiso Ilokah
:Date: 07-2018
"""

from Crypto.Cipher import AES
from Crypto.Protocol import KDF
from Crypto.Random import get_random_bytes
from charm.toolbox.pairinggroup import PairingGroup
from charm.toolbox.pairinggroup import GT


# generate symmetric key from random pairing element
def symmetric_key_gen():
    """
    Function to generate symmetric key string from abe pairing element
    generated by the charm-crypto library

    :return:    tuple containing abe pairing element and corresponding symmetric key string
    """
    group_object = PairingGroup('SS512')
    pairing_element = group_object.random(GT)
    symmetric_key = group_object.serialize(pairing_element)
    return pairing_element, symmetric_key


# extract pairing element from symmetric key
def abe_key_extract(sym_key):
    """
    Function to extract abe pairing element from the symmetric key string

    :param sym_key:     symmetric key
    :return:            return abe pairing element that corresponds to symmetric key string
    """
    groupObj = PairingGroup('SS512')
    abe_key = groupObj.deserialize(sym_key)
    return abe_key


def encrypt(pwd, data):
    """
    Encryption function that encrypts a string using EAS encryption with 128 bit key

    :param pwd:     encryption key (first 128 bits to be used if longer than 128)
    :param data:    string to be encrypted
    :return:        ciphertext
    """
    salt = get_random_bytes(8)
    key = KDF.PBKDF2(pwd[:128], salt)  # pwd[:128] truncates key to max 128
    iv = get_random_bytes(16)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    return salt + iv + cipher.encrypt(data)


def decrypt(pwd, msg):
    """
        Decryption function to decrypt ciphertext and return original message

        :param pwd:     decryption key (first 128 bits to be used if longer than 128)
        :param msg:     string to be decrypted
        :return:        plaintext message
        """
    key = KDF.PBKDF2(pwd[:128], msg[:8])  # pwd[:128] truncates key to max 128
    cipher = AES.new(key, AES.MODE_CFB, msg[8:24])
    return cipher.decrypt(msg[24:])


if __name__ == '__main__':
    original_message = b'Sample message to be decrypted'
    secret_key = b'3:nw2sPUo47KrNHcDRuC5RYsc1XxE0yW2s7WBi9mH+7XVHHW3QfRRhLVYgKzT7LEXLBJExRrZpVy/XNEWkDYC6EC8RLq69fbsbpc4s1oPAiFAcDULzdg350uf728OSKUAe1lYgeTpycf0z0any7JTEWDahjxfTfS6iRh4AhEv1qBg='

    ciphertext = encrypt(secret_key, original_message)
    decrypted_message = decrypt(secret_key, ciphertext)

    assert original_message == decrypted_message, "FAILED!!!"  # expected == actual
